dfmax <- apply(df2, 2, max)
v <- vector()
for (i in 1:length(variablesEstudio)){
v <- c(v, dfmin[i], dfmax[i])
}
dfr <- rbind (dfr, v)
}
dfr <- cbind (clusters, dfr) # Agregar información del cluster:
# Renombrar columnas:
t1 <- c(" min", " max")
t2 <- paste(variablesEstudio, t1, sep="")
colnames(dfr) <- c("Cluster", t2)
View(dfr)
t2
t1 <- rep(c(" min", " max"), length(variablesEstudio)
t2 <- paste(variablesEstudio, t1, sep="")
colnames(dfr) <- c("Cluster", t2)
View(dfr)
return (dfr)
}
grafica_numero_optimo_clusters <- function (df){
fviz_nbclust(df, clara, method = "silhouette", k.max= 12)+
theme_classic()
}
t1 <- rep(c(" min", " max"), length(variablesEstudio))
t2 <- paste(variablesEstudio, t1, sep="")
colnames(dfr) <- c("Cluster", t2)
View(dfr)
variablesEstudio <- colnames(df)
clusters <- unique( clara.res$clustering)
dfr <- data.frame()
for (cluster in clusters){
df2 <- df[clara.res$clustering == cluster, ] # Solo los de mi cluster.
dfmin <- apply(df2, 2, min)
dfmax <- apply(df2, 2, max)
v <- vector()
for (i in 1:length(variablesEstudio)){
v <- c(v, dfmin[i], dfmax[i])
}
dfr <- rbind (dfr, v)
}
dfr <- cbind (clusters, dfr) # Agregar información del cluster:
# Renombrar columnas:
v <- vector()
for (i in 1:length(variablesEstudio)){
v <- c( paste(variablesEstudio[1],"min"), paste (variablesEstudio[i],"max"))
}
colnames(dfr) <- c("Cluster", v)
View(dfr)
return (dfr)
v <- vector()
for (i in 1:length(variablesEstudio)){
v <- c(v, paste(variablesEstudio[1],"min"), paste (variablesEstudio[i],"max"))
}
v
colnames(dfr) <- c("Cluster", v)
View(dfr)
dfr <- dfr[with(dfr, order("Largo min","Altura min", "Batalla min")), ]
View(dfr)
variablesEstudio <- colnames(df)
clusters <- unique( clara.res$clustering)
dfr <- data.frame()
for (cluster in clusters){
df2 <- df[clara.res$clustering == cluster, ] # Solo los de mi cluster.
dfmin <- apply(df2, 2, min)
dfmax <- apply(df2, 2, max)
v <- vector()
for (i in 1:length(variablesEstudio)){
v <- c(v, dfmin[i], dfmax[i])
}
dfr <- rbind (dfr, v)
}
dfr <- cbind (clusters, dfr) # Agregar información del cluster:
# Renombrar columnas:
v <- vector()
for (i in 1:length(variablesEstudio)){
v <- c(v, paste(variablesEstudio[1],"min"), paste (variablesEstudio[i],"max"))
}
colnames(dfr) <- c("Cluster", v)
df2 <- dfr[with(dfr, order("Largo min","Altura min", "Batalla min")), ]
View(df2)
View(dfr)
variablesEstudio <- colnames(df)
clusters <- unique( clara.res$clustering)
dfr <- data.frame()
for (cluster in clusters){
df2 <- df[clara.res$clustering == cluster, ] # Solo los de mi cluster.
dfmin <- apply(df2, 2, min)
dfmax <- apply(df2, 2, max)
v <- vector()
for (i in 1:length(variablesEstudio)){
v <- c(v, dfmin[i], dfmax[i])
}
dfr <- rbind (dfr, v)
}
dfr <- cbind (clusters, dfr) # Agregar información del cluster:
# Renombrar columnas:
v <- vector()
for (i in 1:length(variablesEstudio)){
v <- c(v, paste(variablesEstudio[i],"min"), paste (variablesEstudio[i],"max"))
}
colnames(dfr) <- c("Cluster", v)
df2 <- dfr[with(dfr, order("Largo min","Altura min", "Batalla min")), ]
View(df2)
v
order("Largo min","Altura min", "Batalla min")
with(dfr, order("Largo min","Altura min", "Batalla min")
with(dfr, order("Largo min","Altura min", "Batalla min"))
dfr <- dfr[order(dfr$`Altura min`),]
dfr
v
vOrden <- c("Largo min","Altura min","Batalla min")
v %in% vOrden
which(v %in% vOrden)
clPorMarcas  <- paste(dfO$Marca, clara.res$clustering)
count(clPorMarcas)
clPorMarcas  <- paste(clara.res$clustering, dfO$Marca)
unique(clPorMarcas)
clPorMarcas  <- unique(paste(clara.res$clustering, dfO$Marca))
View(clPorMarcas)
clPorMarcas  <- unique(cbind(clara.res$clustering, dfO$Marca))
clPorMarcas  <- unique(cbind(clara.res$clustering, dfParaEstudio(dfO)$Marca))
clPorMarcas  <- unique(cbind(clara.res$clustering, dfParaEstudio(dfO)$Marca))
clPorMarcas  <- unique(cbind(clara.res$clustering, dfParaEstudio(dfO, variablesEstudio)$Marca))
clPorMarcas
dfParaEstudio(dfO, variablesEstudio)$Marca
df
v1 <- c("Marca", variablesEstudio)
clPorMarcas  <- unique(cbind(clara.res$clustering, dfParaEstudio(dfO, v1)$Marca))
clPorMarcas
clPorMarcas[1,]
count(clPorMarcas[,1])
clPorMarcas  <- unique(cbind(paste("cluster",clara.res$clustering), dfParaEstudio(dfO, v1)$Marca))
count(clPorMarcas[,1])
clPorMarcas  <- unique(cbind(paste("cluster",clara.res$clustering), dfParaEstudio(dfO, v1)$Marca))
dfr <- count(clPorMarcas[,1])
colnames(dfr)  <- c("Cluster", "Número de licitadores")
dfr
clPorMarcas  <- unique(cbind(paste("cluster",clara.res$clustering), dfParaEstudio(dfO, v1)$Marca))
dfr <- count(clPorMarcas[,1])
colnames(dfr)  <- c("Cluster", "N de licitadores")
clPorVehiculos <- count (clara.res$clustering)
colnames(clPorVehiculos)  <- c("Cluster", "N de vehículos")
clPorVehiculos
hist(clPorVehiculos)
k=3
i=3
df <- dfParaEstudio(dfO, variablesEstudio)
clara.res <- resultados_clara (k,  df)
sil <- siluetas (clara.res, df)
env2 <- new.env()
env2$k <- k
env2$variablesEstudio <- variablesEstudio
env2$conjunto <- conjunto
env2$df <- df
env2$sil <- sil
env2$clara.res <- clara.res
env2$media_ci <- valor_medio_siluetas(sil)
env2$dfLicitadoresPorCluster <- contar_licitadores (dfO, variablesEstudio, clara.res)
fichero_salida <- paste0("../informes/conjunto",conjunto,"_k",k,".docx")
rmarkdown::render('rmd/main.rmd',
encoding="UTF-8",
envir = env2,
output_file = fichero_salida)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Clustering/src/informes.r', echo=TRUE)
df <- dfParaEstudio(dfO, variablesEstudio)
clara.res <- resultados_clara (k,  df)
sil <- siluetas (clara.res, df)
env2 <- new.env()
env2$k <- k
env2$variablesEstudio <- variablesEstudio
env2$conjunto <- conjunto
env2$df <- df
env2$sil <- sil
env2$clara.res <- clara.res
env2$media_ci <- valor_medio_siluetas(sil)
env2$dfLicitadoresPorCluster <- contar_licitadores (dfO, variablesEstudio, clara.res)
fichero_salida <- paste0("../informes/conjunto",conjunto,"_k",k,".docx")
rmarkdown::render('rmd/main.rmd',
encoding="UTF-8",
envir = env2,
output_file = fichero_salida)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Clustering/src/clustering.r', encoding = 'UTF-8', echo=TRUE)
env2$dfLicitadoresPorCluster <- contar_licitadores (dfO, variablesEstudio, clara.res)
env2 <- new.env()
env2$k <- k
env2$variablesEstudio <- variablesEstudio
env2$conjunto <- conjunto
env2$df <- df
fichero_salida <- paste0("../informes/conjunto",conjunto,"_k",k,".docx")
rmarkdown::render('rmd/main.rmd',
encoding="UTF-8",
envir = env2,
output_file = fichero_salida)
env2$media_ci <- valor_medio_siluetas(sil)
rmarkdown::render('rmd/main.rmd',
encoding="UTF-8",
envir = env2,
output_file = fichero_salida)
env2$dfLicitadoresPorCluster <- contar_licitadores (dfO, variablesEstudio, clara.res)
View(env2$dfLicitadoresPorCluster)
rmarkdown::render('rmd/main.rmd',
encoding="UTF-8",
envir = env2,
output_file = fichero_salida)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Clustering/main.r', echo=TRUE)
def_segmentos <- read.xlsx("data/AM14.xlsx")
# Ejemplo para instalar
# install.packages("clValid", dependencies = TRUE)
library (openxlsx)
library (plyr)
library (lettercase)
library (stringdist)
library (stringr)
library (outliers)
library (plotly)
library(knitr)
library(rmarkdown)
library(cluster)
library(factoextra)
library (clValid)
dfSegmentos <- read.xlsx("data/AM14.xlsx")
View(dfSegmentos)
dfO <- recuperar_de_cache(fnOriginal)
clusters <- dfSegmentos[,1]
clusters
clusters <- dfSegmentos[,2]
clusters
dfSegmentos <- read.xlsx("data/AM14.xlsx")
clusters <- dfSegmentos[,1]
clusters
clusters <- dfSegmentos[-1,1]
clusters
c <- 3
condiciones <- dfsegmentos [, c + 1]
clusters <- dfSegmentos[-1,1] # Lista de clusters.
dfSegmentos <- read.xlsx("data/AM14.xlsx")
clusters <- dfSegmentos[-1,1] # Lista de clusters.
condiciones <- dfsegmentos [, c + 1]
condiciones <- dfSegmentos [, c + 1]
condiciones
clusters <- dfSegmentos[-1,1] # Lista de clusters.
condiciones <- dfSegmentos [c + 1,]
condiciones
dfSegmentos <- read.xlsx("data/AM14.xlsx")
colnames(dfSegmentos) <- c("Cluster",
"Largo min",
"Largo max",
"Cilindrada min",
"Cilindrada max",
"Altura min",
"Altura max",
"Altura.libre.min",
"Batalla min",
"Combustible")
condiciones <- dfSegmentos [c + 1,]
condiciones
library (openxlsx)
library (plyr)
library (lettercase)
library (stringdist)
library (stringr)
library (outliers)
library (plotly)
library(knitr)
library(rmarkdown)
library(cluster)
library(factoextra)
library (clValid)
Sys.setenv(R_ZIPCMD="C:/Rtools/bin/zip")
dspath <-paste0(getwd(),"/")
source("./src/lib/log_error.r",encoding="UTF-8")
source('./src/lib/proper_case.r',encoding="UTF-8")
source('./src/lib/export.r',encoding="UTF-8")
source('./src/lib/na_functions.r',encoding="UTF-8")
source ("./src/clustering.r")
source ("./src/informes.r")
fnOriginal <- "data/Vehiculos_Comercializados_ultimo_quinquenio"
dfO <- recuperar_de_cache(fnOriginal)
library (openxlsx)
library (plyr)
library (lettercase)
library (stringdist)
library (stringr)
library (outliers)
library (plotly)
library(knitr)
library(rmarkdown)
library(cluster)
library(factoextra)
library (clValid)
dfSegmentos <- read.xlsx("data/AM14.xlsx")
colnames(dfSegmentos) <- c("Cluster",
"Largo min",
"Largo max",
"Cilindrada min",
"Cilindrada max",
"Altura min",
"Altura max",
"Altura.libre.min",
"Batalla min",
"Combustible")
clusters <- dfSegmentos[-1,1] # Lista de clusters.
clusters
c <- 4
condiciones <- dfSegmentos [c + 1,]
condiciones
v <- 1:nrow(dfSegmentos)
v
v <- rep("TRUE", 1:nrow(dfO)) # Todos los vehículos se suponen que valen
v <- rep("TRUE", nrow(dfO)) # Todos los vehículos se suponen que valen
condiciones
v2<- rep(FALSE, nrow(dfO)) # Todos los vehículos se suponen que valen
v&v2
v & v2
v && v2
v <- rep(TRUE, nrow(dfO)) # Todos los vehículos se suponen que valen
v2 <- rep(FALSE, nrow(dfO)) # Todos los vehículos se suponen que valen
v && v2
v & v2
dfO$Largo < condiciones$`Largo min`
vClusters <- rep ("Sin asignar", rep(nrow(dfO)))
condicines
condiciones
condiciones
grepl
unique(dfSegmentos$Combustible)
unique (dfO$Combustible)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Clustering/src/am14.r', encoding = 'UTF-8', echo=TRUE)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Clustering/src/am14.r', encoding = 'UTF-8', echo=TRUE)
for (c in clusters){
condiciones <- dfSegmentos [c + 1,]
cluster <- paste0("Cluster ",c)
v <- rep(TRUE, nrow(dfO)) # Todos los vehículos se suponen que valen
v <- v & filtrar (dfO$Largo, condiciones$`Largo min`,  condiciones$`Largo max`)
v <- v & filtrar (dfO$Cilindrada, condiciones$`Cilindrada min`,  condiciones$`Cilindrada max`)
v <- v & filtrar (dfO$Altura, condiciones$`Altura min`,condiciones$`Altura max`)
v <- v & filtrar (dfO$Altura.libre.delantera, condiciones$Altura.libre.min, NA)
v <- v & filtrar (dfO$Batalla, condiciones$`Batalla min`, NA)
v <- v & filtrar_combustible (dfO$Combustible, condiciones$Combustible)
vCluster [v] <- cluster
}
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Clustering/src/am14.r', encoding = 'UTF-8', echo=TRUE)
c<- 4
condiciones <- dfSegmentos [c + 1,]
cluster <- paste0("Cluster ",c)
v <- rep(TRUE, nrow(dfO)) # Todos los vehículos se suponen que valen
v <- v & filtrar (dfO$Largo, condiciones$`Largo min`,  condiciones$`Largo max`)
filtrar <- function (columnaDfO, min, max) {
v <- rep(TRUE, length(columnaDfO)) # Todos los vehículos se suponen que valen
if (!is.na(min)){
v <- v & (columnaDfO < min)
}
if (!is.na(max)){
v <- v & (columnaDfO > max)
}
return (v)
}
dfO$Largo
filtrar (dfO$Largo, condiciones$`Largo min`,  condiciones$`Largo max`)
v <- v & filtrar (dfO$Largo, condiciones$`Largo min`,  condiciones$`Largo max`)
v <- v & filtrar (dfO$Cilindrada, condiciones$`Cilindrada min`,  condiciones$`Cilindrada max`)
v <- v & filtrar (dfO$Altura, condiciones$`Altura min`,condiciones$`Altura max`)
v <- v & filtrar (dfO$Altura.libre.delantera, condiciones$Altura.libre.min, NA)
v <- v & filtrar (dfO$Batalla, condiciones$`Batalla min`, NA)
which(v)
v <- rep(TRUE, nrow(dfO)) # Todos los vehículos se suponen que valen
which(v)
v <- v & filtrar (dfO$Largo, condiciones$`Largo min`,  condiciones$`Largo max`)
which(v)
v <- v & filtrar (dfO$Cilindrada, condiciones$`Cilindrada min`,  condiciones$`Cilindrada max`)
which(v)
v <- v & filtrar (dfO$Altura, condiciones$`Altura min`,condiciones$`Altura max`)
which(v)
v <- v & filtrar (dfO$Altura.libre.delantera, condiciones$Altura.libre.min, NA)
which(v)
v <- v & filtrar (dfO$Batalla, condiciones$`Batalla min`, NA)
which(v)
v <- v & filtrar_combustible (dfO$Combustible, condiciones$Combustible)
which(v)
v <- rep(TRUE, nrow(dfO)) # Todos los vehículos se suponen que valen
which(v)
v <- v & filtrar (dfO$Largo, condiciones$`Largo min`,  condiciones$`Largo max`)
which(v)
v
columnaDFO <- c(12,123,12,343,5456,6)
min <- 30
max <- 400
columnaDfO <- c(12,123,12,343,5456,6)
v <- rep(TRUE, length(columnaDfO)) # Todos los vehículos se suponen que valen
if (!is.na(min)){
v <- v & (columnaDfO < min)
}
v
if (!is.na(max)){
v <- v & (columnaDfO > max)
}
filtrar <- function (columnaDfO, min, max) {
v <- rep(TRUE, length(columnaDfO)) # Todos los vehículos se suponen que valen
columnaDfO <- as.numeric(columnaDfO)
if (!is.na(min)){
v <- v & (columnaDfO < min)
}
if (!is.na(max)){
v <- v & (columnaDfO > max)
}
return (v)
}
filtrar(columnaDfO, min, max)
filtrar(columnaDfO, 1, max)
filtrar(columnaDfO, 1, 9000)
v <- rep(TRUE, length(columnaDfO)) # Todos los vehículos se suponen que valen
columnaDfO <- as.numeric(columnaDfO)
if (!is.na(min)){
v <- v & (columnaDfO < min)
}
v
if (!is.na(max)){
v <- v & (columnaDfO > max)
}
v
filtrar <- function (columnaDfO, min, max) {
v <- rep(TRUE, length(columnaDfO)) # Todos los vehículos se suponen que valen
columnaDfO <- as.numeric(columnaDfO)
if (!is.na(min)){
v <- v & (columnaDfO > min)
}
if (!is.na(max)){
v <- v & (columnaDfO < max)
}
return (v)
}
filtrar(columnaDfO, 1, 9000)
filtrar(columnaDfO, 1, 400)
filtrar(columnaDfO, 300, 400)
columnaDfO
filtrar(columnaDfO, 100, 400)
filtrar(columnaDfO, 11, 400)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Clustering/src/am14.r', encoding = 'UTF-8', echo=TRUE)
vClusters <- rep ("Sin asignar", rep(nrow(dfO)))
for (c in clusters){
condiciones <- dfSegmentos [c + 1,]
cluster <- paste0("Cluster ",c)
v <- rep(TRUE, nrow(dfO)) # Todos los vehículos se suponen que valen
which(v)
v <- v & filtrar (dfO$Largo, condiciones$`Largo min`,  condiciones$`Largo max`)
v <- v & filtrar (dfO$Cilindrada, condiciones$`Cilindrada min`,  condiciones$`Cilindrada max`)
which(v)
v <- v & filtrar (dfO$Altura, condiciones$`Altura min`,condiciones$`Altura max`)
which(v)
v <- v & filtrar (dfO$Altura.libre.delantera, condiciones$Altura.libre.min, NA)
which(v)
v <- v & filtrar (dfO$Batalla, condiciones$`Batalla min`, NA)
which(v)
v <- v & filtrar_combustible (dfO$Combustible, condiciones$Combustible)
which(v)
vCluster [v] <- cluster
}
vClusters <- rep ("Sin asignar", rep(nrow(dfO)))
for (c in clusters){
condiciones <- dfSegmentos [c + 1,]
cluster <- paste0("Cluster ",c)
v <- rep(TRUE, nrow(dfO)) # Todos los vehículos se suponen que valen
which(v)
v <- v & filtrar (dfO$Largo, condiciones$`Largo min`,  condiciones$`Largo max`)
v <- v & filtrar (dfO$Cilindrada, condiciones$`Cilindrada min`,  condiciones$`Cilindrada max`)
which(v)
v <- v & filtrar (dfO$Altura, condiciones$`Altura min`,condiciones$`Altura max`)
which(v)
v <- v & filtrar (dfO$Altura.libre.delantera, condiciones$Altura.libre.min, NA)
which(v)
v <- v & filtrar (dfO$Batalla, condiciones$`Batalla min`, NA)
which(v)
v <- v & filtrar_combustible (dfO$Combustible, condiciones$Combustible)
which(v)
vClusters [v] <- cluster
}
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Clustering/src/am14.r', encoding = 'UTF-8', echo=TRUE)
vClusters <- rep ("Sin asignar", rep(nrow(dfO)))
for (c in clusters){
condiciones <- dfSegmentos [c + 1,]
cluster <- paste0("Cluster ",c)
v <- rep(TRUE, nrow(dfO)) # Todos los vehículos se suponen que valen
which(v)
v <- v & filtrar (dfO$Largo, condiciones$`Largo min`,  condiciones$`Largo max`)
v <- v & filtrar (dfO$Cilindrada, condiciones$`Cilindrada min`,  condiciones$`Cilindrada max`)
which(v)
v <- v & filtrar (dfO$Altura, condiciones$`Altura min`,condiciones$`Altura max`)
which(v)
v <- v & filtrar (dfO$Altura.libre.delantera, condiciones$Altura.libre.min, NA)
which(v)
v <- v & filtrar (dfO$Batalla, condiciones$`Batalla min`, NA)
which(v)
v <- v & filtrar_combustible (dfO$Combustible, condiciones$Combustible)
which(v)
vClusters [v] <- cluster
}
count (vClusters)
write (count(vClusters), "informes/Am14_vehPorCluster.xlsx", asTable=TRUE)
write.xlsx (count(vClusters), "informes/Am14_vehPorCluster.xlsx", asTable=TRUE)
dflic <- data.frame (vClusters, dfO$Marca)
head(dflic)
Count (dflic)
count (dflic)
count (dflic)[, 1:2]
count (count (dflic)[, 1:2])
count (dflic)[, 1:2]
count(unique(dflic[,1:2]) [,1])
licitadores_por_cluster <- count(unique(dflic[,1:2]) [,1])
licitadores_por_cluster <- count(unique(dflic[,1:2]) [,1])
colnames(licitadores_por_cluster) <- c("Cluster", "Numero de licitadores")
write.xlsx (licitadores_por_cluster, "informes/Am14_licitadoresPorCluster.xlsx", asTable=TRUE)
