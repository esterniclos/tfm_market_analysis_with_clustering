vAlternativas <- c(modelo_desglosado[1],
paste(modelo_desglosado[1],modelo_desglosado[2]),
paste(modelo_desglosado[1],modelo_desglosado[3]),
paste(modelo_desglosado[1],modelo_desglosado[2],modelo_desglosado[3]),
paste(modelo_desglosado[1],modelo_desglosado[2],modelo_desglosado[length(modelo_desglosado)-1]),
modelo_desglosado[length(modelo_desglosado)])
vAlternativas <- vAlternativas [!grepl (" NA$", vAlternativas)]
vAlternativas <- vAlternativas [!grepl (" NA $", vAlternativas)]
vAlternativas <- unique(vAlternativas)
vDist <- c(rep (60, length(vAlternativas)))
for (r in 1: length(vAlternativas)){
alternativa <- vAlternativas[r]
vDist[r] <- distancia_lv_minima (marca, alternativa,marcas_validadas, modelos_validados)
print (paste0("Alternativa  ", r, " ", alternativa))
if (vDist[r] == 0){
log_vpic_correccion_modelo(marca,modelo,alternativa,0,TRUE)
return (alternativa)
}
}
distancia_minima = min (vDist)
alternativa_a_estudiar <- vAlternativas[which (vDist ==distancia_minima)]
alternativa_a_estudiar
print (paste0("Alternativa seleccionada ", r, " ", alternativa_a_estudiar))
modelo <- alternativa_a_estudiar
dfIdae <- recuperar_de_cache(fnIdaeOrig)
dfIdae_norm <- limpieza_idae(dfIdae)
df1 <- alternativa_idae_modelos (dfVpicnorm$Marca, dfVpicnorm$Modelo,
marcas_validadas, modelos_validados)
marcas_validadas <- dfIdae_norm$Marca
modelos_validados<- dfIdae_norm$Modelo
marcas_validadas <- dfIdae_norm$Marca
modelos_validados<- dfIdae_norm$Modelo
# añadir la alternativa IDAE y si están o no incluidos en el modelo IDAE:
df1 <- alternativa_idae_modelos (dfVpicnorm$Marca, dfVpicnorm$Modelo,
marcas_validadas, modelos_validados)
dfVpicnorm <-   cbind   (dfVpicnorm,df1)
exportacion(fnVpicNorm, dfVpicnorm)
vpicEstudioAtipicos(dfvpicLimp)
log_transformacion_cabecera()
dfr <- data.frame()
for (i in  1:nrow(dfEEALimp2)){
print (paste0("Componiendo en dfvpicLimp2[",i,"]"))
motorizacion <- dfEEALimp2[i,]
dfmotorizacion <-  componer_vehiculo(motorizacion, dfvpicLimp2)
if (! is.null( dfmotorizacion)) dfr <- rbind (dfr, dfmotorizacion)
}
# eliminar vehículos con una tasa de valores faltantes mayor del 25%
dfr <- dfr[rowSums(is.na(dfr)) < 4,]
dfr <- dfr[!duplicated(dfr),] # Reducir duplicados
dfr <- dfr[!is.na(dfr$Ancho.eje.tracción),] # Quitar el vehículo sin ancho de eje. Es un mal cruce de datos.
exportacion(fnTransformado, dfr)
exportacion(fnClustering,dfr)
log_transformacion_valores_unicos()
dfvpicLimp <-  vpic_limpieza (dfVpicnorm)
dfvpicLimp2 <- vpic_correccion_atipicos (dfvpicLimp)
dfvpicLimp2$Batalla
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Datasources/01-builddatasets.R', echo=TRUE)
log_transformacion_cabecera()
dfr <- data.frame()
for (i in  1:nrow(dfEEALimp2)){
print (paste0("Componiendo en dfvpicLimp2[",i,"]"))
motorizacion <- dfEEALimp2[i,]
dfmotorizacion <-  componer_vehiculo(motorizacion, dfvpicLimp2)
if (! is.null( dfmotorizacion)) dfr <- rbind (dfr, dfmotorizacion)
}
# eliminar vehículos con una tasa de valores faltantes mayor del 25%
dfr <- dfr[rowSums(is.na(dfr)) < 4,]
dfr <- dfr[!duplicated(dfr),] # Reducir duplicados
dfr <- dfr[!is.na(dfr$Ancho.eje.tracción),] # Quitar el vehículo sin ancho de eje. Es un mal cruce de datos.
exportacion(fnTransformado, dfr)
exportacion(fnClustering,dfr)
log_transformacion_valores_unicos()
i<- 916
motorizacion <- dfEEALimp2[i,]
motorizacion
dfEELimp <- limpieza_eea (dfEEAnorm)
dfEEAnorm <- recuperar_de_cache(fnEeaNormalizado)
dfEELimp <- limpieza_eea (dfEEAnorm)
dfEEALimp2 <- eea_correccion_atipicos(dfEELimp)
transformacion((dfEEALimp2, dfvpicLimp2)
transformacion(dfEEALimp2, dfvpicLimp2)
i<- 916
dfIdae <- recuperar_de_cache(fnIdaeOrig)
exportacion (fnIdaeOrig, dfIdae)
dfIdae_norm <- limpieza_idae(dfIdae)
dfEEAnorm <- recuperar_de_cache(fnEeaNormalizado)
# añadir la alternativa IDAE y si están o no incluidos en el modelo IDAE:
v1 <- alternativa_idae_modelos (dfEEAnorm$Marca, dfEEAnorm$Modelo,
marcas_validadas, modelos_validados)
dfEEAnorm$Alternativa_Idae <- v1
exportacion (fnEeaNormalizado, dfEEAnorm)
dfEELimp <- limpieza_eea (dfEEAnorm)
dfEEALimp2 <- eea_correccion_atipicos(dfEELimp)
log_transformacion_cabecera()
dfr <- data.frame()
for (i in  1:nrow(dfEEALimp2)){
print (paste0("Componiendo en dfvpicLimp2[",i,"]"))
motorizacion <- dfEEALimp2[i,]
dfmotorizacion <-  componer_vehiculo(motorizacion, dfvpicLimp2)
if (! is.null( dfmotorizacion)) dfr <- rbind (dfr, dfmotorizacion)
}
# eliminar vehículos con una tasa de valores faltantes mayor del 25%
dfr <- dfr[rowSums(is.na(dfr)) < 4,]
dfr <- dfr[!duplicated(dfr),] # Reducir duplicados
dfr <- dfr[!is.na(dfr$Ancho.eje.tracción),] # Quitar el vehículo sin ancho de eje. Es un mal cruce de datos.
exportacion(fnTransformado, dfr)
exportacion(fnClustering,dfr)
log_transformacion_valores_unicos()
i <- 917
motorizacion
log_transformacion_cabecera()
dfr <- data.frame()
for (i in  1:nrow(dfEEALimp2)){
print (paste0("Componiendo en dfvpicLimp2[",i,"]"))
motorizacion <- dfEEALimp2[i,]
dfmotorizacion <-  componer_vehiculo(motorizacion, dfvpicLimp2)
if (! is.null( dfmotorizacion)) dfr <- rbind (dfr, dfmotorizacion)
}
# eliminar vehículos con una tasa de valores faltantes mayor del 25%
dfr <- dfr[rowSums(is.na(dfr)) < 4,]
dfr <- dfr[!duplicated(dfr),] # Reducir duplicados
dfr <- dfr[!is.na(dfr$Ancho.eje.tracción),] # Quitar el vehículo sin ancho de eje. Es un mal cruce de datos.
exportacion(fnTransformado, dfr)
exportacion(fnClustering,dfr)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Datasources/01-builddatasets.R', echo=TRUE)
r <- 917
motorizacion <- dfEEALimp2[i,]
dfmotorizacion <-  componer_vehiculo(motorizacion, dfvpicLimp2)
i<- 917
log_transformacion_cabecera()
dfr <- data.frame()
for (i in  1:nrow(dfEEALimp2)){
print (paste0("Componiendo en dfvpicLimp2[",i,"]"))
motorizacion <- dfEEALimp2[i,]
dfmotorizacion <-  componer_vehiculo(motorizacion, dfvpicLimp2)
if (! is.null( dfmotorizacion)) dfr <- rbind (dfr, dfmotorizacion)
}
i<- 917
print (paste0("Componiendo en dfvpicLimp2[",i,"]"))
motorizacion
i
i<- 917
# Comparar marca:
filas_marca <- (dfvpicLimp2$Marca == motorizacion$Marca)
modelos_marca_Vpic <- dfvpicLimp2$Alternativa_IDAE[filas_marca]
modelos_marca_Vpic
modelos_marca_Vpic
filas_marca
count(filas_marca)
View(dfvpicLimp2$Marca)
unique(dfvpicLimp2$Marca)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Datasources/src/lib/alternatives.r', encoding = 'UTF-8', echo=TRUE)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Datasources/src/lib/alternatives.r', encoding = 'UTF-8', echo=TRUE)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Datasources/src/lib/alternatives.r', encoding = 'UTF-8', echo=TRUE)
log_transformacion_cabecera()
dfr <- data.frame()
for (i in  1:nrow(dfEEALimp2)){
print (paste0("Componiendo en dfvpicLimp2[",i,"]"))
motorizacion <- dfEEALimp2[i,]
dfmotorizacion <-  componer_vehiculo(motorizacion, dfvpicLimp2)
if (! is.null( dfmotorizacion)) dfr <- rbind (dfr, dfmotorizacion)
}
motorizacion
# Comparar marca:
filas_marca <- (dfvpicLimp2$Marca == motorizacion$Marca)
modelos_marca_Vpic <- dfvpicLimp2$Alternativa_IDAE[filas_marca]
is.null(modelos_marca_Vpic)
(modelos_marca_Vpic)
length((modelos_marca_Vpic))
nrow((modelos_marca_Vpic))
modelos_marca_Vpic
is.na(modelos_marca_Vpic)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Datasources/src/lib/alternatives.r', encoding = 'UTF-8', echo=TRUE)
log_transformacion_cabecera()
dfr <- data.frame()
for (i in  1:nrow(dfEEALimp2)){
print (paste0("Componiendo en dfvpicLimp2[",i,"]"))
motorizacion <- dfEEALimp2[i,]
dfmotorizacion <-  componer_vehiculo(motorizacion, dfvpicLimp2)
if (! is.null( dfmotorizacion)) dfr <- rbind (dfr, dfmotorizacion)
}
# eliminar vehículos con una tasa de valores faltantes mayor del 25%
dfr <- dfr[rowSums(is.na(dfr)) < 4,]
dfr <- dfr[!duplicated(dfr),] # Reducir duplicados
dfr <- dfr[!is.na(dfr$Ancho.eje.tracción),] # Quitar el vehículo sin ancho de eje. Es un mal cruce de datos.
nrow(dfr)
dfEEAnorm <- recuperar_de_cache(fnEeaNormalizado)
#####################################################
## Correcciones iniciales EEA
#####################################################
eeaCorreccionesIniciales <- function  (dfEEAnorm) {
filas <- (dfEEAnorm$Marca == "Land Rover")
dfEEAnorm$Marca[filas] <- "Landrover"
}
dfEEAnorm <- eeaCorreccionesIniciales(dfEEAnorm)
exportacion (fnEeaNormalizado, dfEEAnorm)
dfEELimp <- limpieza_eea (dfEEAnorm)
#####################################################
## Correcciones iniciales EEA
#####################################################
eeaCorreccionesIniciales <- function  (dfEEAnorm) {
filas <- (dfEEAnorm$Marca == "Land Rover")
dfEEAnorm$Marca[filas] <- "Landrover"
return (dfEEAnorm)
}
dfEEAnorm <- recuperar_de_cache(fnEeaNormalizado)
dfEEAnorm <- eeaCorreccionesIniciales(dfEEAnorm)
exportacion (fnEeaNormalizado, dfEEAnorm)
dfEELimp <- limpieza_eea (dfEEAnorm)
# eeaEstudioAtipicos(dfEEAnorm)
dfEEALimp2 <- eea_correccion_atipicos(dfEELimp)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Datasources/src/limpieza_normalizacion_eea.r', encoding = 'UTF-8', echo=TRUE)
dfEEAnorm <- recuperar_de_cache(fnEeaNormalizado)
colnames(dfEEAnorm)
dfes <- solo_registrados_españa (dfeea)
dfes <- solo_registrados_españa (dfeea)
dfes <-  recuperar_de_cache(fnEeaSinNormalizarEs)
dfEEAnorm <- normalizar_eea(dfes, dfIdae_norm$Marca, dfIdae_norm$Modelo)
dfEELimp <- limpieza_eea (dfEEAnorm)
dfEEALimp2 <- eea_correccion_atipicos(dfEELimp)
nrow(dfEEAnorm)
dfEELimp <- limpieza_eea (dfEEAnorm)
nrow(dfEELimp)
dfEELimp <- dfEEAnorm
columnas <- c("Tipo","Variante","Version","Marca","Modelo", "EmisionesCO2_g_km",
"Masa","Batalla","Ancho.eje.tracción","Ancho.eje.secundario",
"Combustible","Monofuel","Cilindrada","Kw.motor.eléctrico",
"Consumo.motor.eléctrico.wh_km","Modelo_IDAE","Alternativa_Idae")
colnames(dfEEAnorm)
dfEELimp <- dfEEAnorm[,colnames(dfEEAnorm) %in% columnas]
dfEELimp <- dfEELimp[,colnames(dfEELimp) %in% columnas]
dfEELimp <- dfEELimp[!is.na(dfEELimp$Modelo_IDAE),]
dfEELimp <- dfEEAnorm
columnas <- c("Tipo","Variante","Version","Marca","Modelo", "EmisionesCO2_g_km",
"Masa","Batalla","Ancho.eje.tracción","Ancho.eje.secundario",
"Combustible","Monofuel","Cilindrada","Kw.motor.eléctrico",
"Consumo.motor.eléctrico.wh_km","Modelo_IDAE","Alternativa_Idae")
dfEELimp <- dfEELimp[,colnames(dfEELimp) %in% columnas]
is.na(dfEELimp$Modelo_IDAE)
dfEELimp <- dfEELimp[!is.na(dfEELimp$Alternativa_Idae),]
nrow(dfEELimp)
dfEELimp <- dfEELimp[,colnames(dfEELimp) %in% columnas]
# Modelos que pertenecen al modelo Idae:
dfEELimp <- dfEELimp[!is.na(dfEELimp$Alternativa_Idae),]
# Eliminar valores (son erróneos) de Cilindrada en eléctricos
es_electrico <- dfEELimp$Combustible == "Eléctrico"
es_monofuel <- (dfEELimp$Monofuel == "Monofuel")
dfEELimp$Cilindrada[es_electrico] <- NA
# Eliminar valores (son erróneos) de potencia eléctrica en monofuel
dfEELimp$Kw.motor.eléctrico [!es_electrico] <- NA
dfEELimp$Consumo.motor.eléctrico.wh_km[!es_electrico] <- NA
exportacion (fnEeaLimp, dfEELimp)
nrow(dfEELimp)
dfEEALimp2 <- eea_correccion_atipicos(dfEELimp)
nrow(dfEEALimp2)
nrow(dfEEALimp)
nrow(dfEELimp)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Datasources/src/limpieza_normalizacion_eea.r', encoding = 'UTF-8', echo=TRUE)
log_transformacion_cabecera()
dfr <- data.frame()
for (i in  1:nrow(dfEEALimp2)){
print (paste0("Componiendo en dfvpicLimp2[",i,"]"))
motorizacion <- dfEEALimp2[i,]
dfmotorizacion <-  componer_vehiculo(motorizacion, dfvpicLimp2)
if (! is.null( dfmotorizacion)) dfr <- rbind (dfr, dfmotorizacion)
}
# eliminar vehículos con una tasa de valores faltantes mayor del 25%
dfr <- dfr[rowSums(is.na(dfr)) < 4,]
dfr <- dfr[!duplicated(dfr),] # Reducir duplicados
dfr <- dfr[!is.na(dfr$Ancho.eje.tracción),] # Quitar el vehículo sin ancho de eje. Es un mal cruce de datos.
exportacion(fnTransformado, dfr)
exportacion(fnClustering,dfr)
log_transformacion_valores_unicos()
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Datasources/01-builddatasets.R', echo=TRUE)
motorizacion
dfEEAnorm <- recuperar_de_cache(fnEeaNormalizado)
colnames(dfEEAnorm)
colnames(dfEEALimp2)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Datasources/src/limpieza_normalizacion_eea.r', encoding = 'UTF-8', echo=TRUE)
# Creación de los datasets:
# dfeea<- unificar_datasets ()
# dfes <- solo_registrados_españa (dfeea)
# dfEEAnorm <- normalizar_eea(dfes, dfIdae_norm$Marca, dfIdae_norm$Modelo)
dfEELimp <- limpieza_eea (dfEEAnorm)
# eeaEstudioAtipicos(dfEEAnorm)
dfEEALimp2 <- eea_correccion_atipicos(dfEELimp)
colnames(dfEEALimp2)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Datasources/src/limpieza_normalizacion_eea.r', encoding = 'UTF-8', echo=TRUE)
log_transformacion_cabecera()
dfr <- data.frame()
for (i in  1:nrow(dfEEALimp2)){
print (paste0("Componiendo en dfvpicLimp2[",i,"]"))
motorizacion <- dfEEALimp2[i,]
dfmotorizacion <-  componer_vehiculo(motorizacion, dfvpicLimp2)
if (! is.null( dfmotorizacion)) dfr <- rbind (dfr, dfmotorizacion)
}
# eliminar vehículos con una tasa de valores faltantes mayor del 25%
dfr <- dfr[rowSums(is.na(dfr)) < 4,]
dfr <- dfr[!duplicated(dfr),] # Reducir duplicados
dfr <- dfr[!is.na(dfr$Ancho.eje.tracción),] # Quitar el vehículo sin ancho de eje. Es un mal cruce de datos.
exportacion(fnTransformado, dfr)
exportacion(fnClustering,dfr)
nrow(dfr)
dfr <- data.frame()
for (i in  1:nrow(dfEEALimp2)){
print (paste0("Componiendo en dfvpicLimp2[",i,"]"))
motorizacion <- dfEEALimp2[i,]
dfmotorizacion <-  componer_vehiculo(motorizacion, dfvpicLimp2)
if (! is.null( dfmotorizacion)) dfr <- rbind (dfr, dfmotorizacion)
}
nrow(dfr)
# eliminar vehículos con una tasa de valores faltantes mayor del 25%
dfr <- dfr[rowSums(is.na(dfr)) < 4,]
dfr <- dfr[!duplicated(dfr),] # Reducir duplicados
dfr <- dfr[!is.na(dfr$Ancho.eje.tracción),] # Quitar el vehículo sin ancho de eje. Es un mal cruce de datos.
nrow(dfr)
dfr <- data.frame()
for (i in  1:nrow(dfEEALimp2)){
print (paste0("Componiendo en dfvpicLimp2[",i,"]"))
motorizacion <- dfEEALimp2[i,]
dfmotorizacion <-  componer_vehiculo(motorizacion, dfvpicLimp2)
if (! is.null( dfmotorizacion)) dfr <- rbind (dfr, dfmotorizacion)
}
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Datasources/./src/transformacion.r', encoding = 'UTF-8', echo=TRUE)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Datasources/01-builddatasets.R', echo=TRUE)
log_transformacion_cabecera()
dfr <- data.frame()
for (i in  1:nrow(dfEEALimp2)){
print (paste0("Componiendo en dfvpicLimp2[",i,"]"))
motorizacion <- dfEEALimp2[i,]
dfmotorizacion <-  componer_vehiculo(motorizacion, dfvpicLimp2)
if (! is.null( dfmotorizacion)) dfr <- rbind (dfr, dfmotorizacion)
}
dfr.bkp <- dfr # debug
nrow(dfr.bkp)
dfr <- dfr.bkp
# eliminar vehículos con una tasa de valores faltantes mayor del 25%
dfr <- dfr[rowSums(is.na(dfr)) < 4,]
nrow(dfr)
rowSums(is.na(dfr))
rowSums(is.na(dfr))
dfr[1:2,]
View(dfr[1:2,])
View(dfvpicLimp2[1:3,])
View(dfEEALimp2[1:3,])
View(dfr)
dfr <- data.frame()
for (i in  1:nrow(dfEEALimp2)){
print (paste0("Componiendo en dfvpicLimp2[",i,"]"))
motorizacion <- dfEEALimp2[i,]
dfmotorizacion <-  componer_vehiculo(motorizacion, dfvpicLimp2)
if (! is.null( dfmotorizacion)) dfr <- rbind (dfr, dfmotorizacion)
print (paste("Tenemos ya ", nrow(dfr), "vehículos"))
}
dfr.bkp <- dfr # debug
nrow(dfr.bkp)
nrow(dfr)
dfr[1:3,1:2]
dfr.bkp[1:3,1:2]
rowSums(is.na(dfr))
# eliminar vehículos con una tasa de valores faltantes mayor del 25%
dfr <- dfr[rowSums(is.na(dfr)) < 4,]
nrow(dfr)
dfr <- dfr.bkp
rowSums(is.na(dfr)) < 4
count (rowSums(is.na(dfr)) < 4)
count (rowSums(is.na(dfr)) < 5)
count (rowSums(is.na(dfr)) < 6)
count (rowSums(is.na(dfr)) < 7)
count (rowSums(is.na(dfr)) < 5)
count (rowSums(is.na(dfr)) < 4)
count (rowSums(is.na(dfr)) < 5)
count (rowSums(is.na(dfr)) < 6)
count (rowSums(is.na(dfr)) < 5)
dfr <- dfr[!is.na(dfr$Ancho.eje.tracción),] # Quitar el vehículo sin ancho de eje. Es un mal cruce de datos.
nrow(dfr)
dfr <- dfr[!duplicated(dfr),] # Reducir duplicados
nrow(dfr)
count (rowSums(is.na(dfr)) < 5)
count (rowSums(is.na(dfr)) < 6)
# eliminar vehículos con una tasa de valores faltantes mayor del 25%
dfr <- dfr[rowSums(is.na(dfr)) < 6,]
nrow(dfr)
exportacion(fnTransformado, dfr)
exportacion(fnClustering,dfr)
log_transformacion_valores_unicos()
dfr <- dfr.bkp
dfr <- dfr[!is.na(dfr$Ancho.eje.tracción),] # Quitar el vehículo sin ancho de eje. Es un mal cruce de datos.
nrow(dfr)
dfr <- dfr[!duplicated(dfr),] # Reducir duplicados
nrow(dfr)
# eliminar vehículos con una tasa de valores faltantes mayor del 25%
dfr <- dfr[rowSums(is.na(dfr)) < 6,]
nrow(dfr)
dfr <- dfr.bkp
dfr <- dfr[!is.na(dfr$Ancho.eje.tracción),] # Quitar el vehículo sin ancho de eje. Es un mal cruce de datos.
nrow(dfr)
dfr <- dfr[!duplicated(dfr),] # Reducir duplicados
nrow(dfr)
# eliminar vehículos con una tasa de valores faltantes mayor del 25%
dfr <- dfr[rowSums(is.na(dfr)) < 6,]
nrow(dfr)
exportacion(fnTransformado, dfr)
exportacion(fnClustering,dfr)
exportacion(fnTransformado, dfr)
df2 <- dfr [ ,! (colnames(dfr) %in% columnas_a_quitar)]
columnas_a_quitar <- c("Modelo","Año")
df2 <- dfr [ ,! (colnames(dfr) %in% columnas_a_quitar)]
columnas_a_quitar <- c("Modelo","Año")
df2 <- dfr [ ,! (colnames(dfr) %in% columnas_a_quitar)]
df2 <- df2[!(duplicated(df2)), ]
nrow(df2)
colnames(df2)
columnas_a_quitar <- c("Modelo","Año","Variante")
df2 <- dfr [ ,! (colnames(dfr) %in% columnas_a_quitar)]
df2 <- df2[!(duplicated(df2)), ]
nrow(df2)
columnas_a_quitar <- c("Modelo","Año","Tipo", "Version", "Homologacion.Tipo","Variante")
columnas_a_quitar <- c("Modelo","Año","Tipo", "Version", "Homologacion.Tipo","Variante")
df2 <- dfr [ ,! (colnames(dfr) %in% columnas_a_quitar)]
df2 <- df2[!(duplicated(df2)), ]
nrow(df2)
dfr <- dfr.bkp
columnas_a_quitar <- c("Modelo","Año","Tipo", "Version", "Homologacion.Tipo","Variante",
"Fabricante.OEM",
"Fabricante")
df2 <- dfr [ ,! (colnames(dfr) %in% columnas_a_quitar)]
df2 <- df2[!(duplicated(df2)), ]
nrow(df2)
columnas_a_quitar <- c("Modelo","Año","Tipo", "Version", "Homologacion.Tipo","Variante",
"Fabricante.OEM",
"Fabricante")
df2 <- dfr [ ,! (colnames(dfr) %in% columnas_a_quitar)]
df2 <- df2[!(duplicated(df2)), ]
nrow(df2)
columnas_a_quitar <- c("Modelo","Año","Tipo", "Version", "Homologacion.Tipo","Variante",
)
df2 <- dfr [ ,! (colnames(dfr) %in% columnas_a_quitar)]
df2 <- df2[!(duplicated(df2)), ]
nrow(df2)
columnas_a_quitar <- c("Modelo","Año","Tipo", "Version", "Homologacion.Tipo","Variante"
)
df2 <- dfr [ ,! (colnames(dfr) %in% columnas_a_quitar)]
df2 <- df2[!(duplicated(df2)), ]
nrow(df2)
dfr <- dfr.bkp
columnas_a_quitar <- c("Modelo","Año","Tipo", "Version", "Homologacion.Tipo","Variante"
)
df2 <- dfr [ ,! (colnames(dfr) %in% columnas_a_quitar)]
df2 <- df2[!(duplicated(df2)), ]
nrow(df2)
columnas_a_quitar <- c("Id",
"Modelo","Año","Tipo", "Version", "Homologacion.Tipo","Variante"
)
df2 <- dfr [ ,! (colnames(dfr) %in% columnas_a_quitar)]
df2 <- df2[!(duplicated(df2)), ]
nrow(df2)
columnas_a_quitar <- c("Id",
"Modelo",
"Año",
"Tipo",
"Version",
"Homologacion.Tipo",
"Variante",
"Grupo.empresarial",
"IdFabricante",
"Categoria",
"Registros.en.estado.miembro"
)
df2 <- dfr [ ,! (colnames(dfr) %in% columnas_a_quitar)]
df2 <- df2[!(duplicated(df2)), ]
nrow(df2)
columnas_a_quitar <- c("Id",
"Modelo",
"Año",
"Homologacion.Tipo",
"Grupo.empresarial",
"IdFabricante",
"Categoria",
"Registros.en.estado.miembro"
)
df2 <- dfr [ ,! (colnames(dfr) %in% columnas_a_quitar)]
df2 <- df2[!(duplicated(df2)), ]
nrow(df2)
columnas_a_quitar <- c("Id",
"Modelo",
"Año",
"Variante",
"Homologacion.Tipo",
"Grupo.empresarial",
"IdFabricante",
"Categoria",
"Registros.en.estado.miembro"
)
df2 <- dfr [ ,! (colnames(dfr) %in% columnas_a_quitar)]
df2 <- df2[!(duplicated(df2)), ]
nrow(df2)
dfr <- anonimizar_modelo(dfr)
exportacion(fnTransformado, dfr)
exportacion(fnClustering,dfr)
source('S:/Ester_documentos/cursos/2017/unir/06-TFM/04 - Desarrollo TFM/Datasources/./src/transformacion.r', encoding = 'UTF-8', echo=TRUE)
dfr <- dfr[rowSums(is.na(dfr)) < 6,]
nrow(dfr)
dfr <- anonimizar_modelo(dfr)
exportacion(fnTransformado, dfr)
exportacion(fnClustering,dfr)
# eliminar vehículos con una tasa de valores faltantes mayor del 25%
dfr <- dfr[rowSums(is.na(dfr)) < 6,]
nrow(dfr)
dfr <- anonimizar_modelo(dfr)
exportacion(fnTransformado, dfr)
exportacion(fnClustering,dfr)
